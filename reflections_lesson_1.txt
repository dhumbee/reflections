How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It made it easier to locate instead of searching each line individually.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It makes it quicker to make changes as well as see how each stage of your project is coming along and what to adjust next time.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros of manually choosing:
    	-You pick when to save so you have more control 
    	-keeps you more conscience of updating and making logical sense of when to do it
    Cons of manually choosing:
    	-If you forget...
    Pros of auto save:
    	-You don't have to remember
    Cons of auto save:
    	-Have too many saved documents you might not need

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because it probably condenses your changes??

How can you use the commands git log and git diff to view the history of files?

    -git log will show all your revisions made to that file, each commit has it's own ID (like a serial number)
    -diff shows differences between each commit

How might using version control make you more confident to make changes that
could break something?

    Cause you always have a backup!

Now that you have your workspace set up, what do you want to try using Git for?

    My next project!

Extra Notes:
Git command review...

Compare two commits, printing each line that is present in one commit but not the other.

    git diff will do this. It takes two arguments - the two commit ids to compare. 

        Behavior of git diff

            The middle commit, 06d72e, is the first commit with the mute button, so comparing that commit and the previous commit, 3d4d45, would show the changes that add the mute button.

            In order for the changes adding the mute button to be shown as additions, the commit with the mute button needs to be the second argument to git diff. That is because git diff considers the first argument as the "original", and the second argument as the "new" version, so additions are lines present in the second argument but not the first.

            Thus, the last command listed, git diff 3d4d45 06d72e, is correct, and would show the mute button lines as additions. Reversing the arguments and running git diff 06d72e 3d4d45 would instead show the mute button lines as deletions.


Make a copy of an entire Git repository, including the history, onto your own computer.

    git clone will do this. It takes one argument - the url of the repository to copy. 

        Behavior of git clone

            If someone else gives you the location of their directory or repository, you can copy or clone it to your own computer.

                This is true for both copying a directory and cloning a repository.  As you saw in the previous lesson, if you have a URL to a repository, you can copy it to your computer using git clone.  For copying a directory, you weren't expected to know this, but it is possible to copy a directory from one computer to another using the command scp, which stands for "secure copy". The name was chosen because the scp command lets you securely copy a directory from one computer to another. 

            The history of changes to the directory or repository is copied.

                This is true for cloning a repository, but not for copying a directory. The main reason to use git clone rather than copying the directory is because git clone will also copy the commit history of the repository. However, copying can be done on any directory, whereas git clone only works on a Git repository. 


            If you make changes to the copied directory or cloned repository, the original will not change.

                This is true for both copying a directory and cloning a repository. In both cases, you're making a copy that you can alter without changing the original. 


            The state of every file in the directory or repository is copied.

                This is true for both copying a directory and cloning a repository. In both cases, all the files are copied.


Temporarily reset all files in a directory to their state at the time of a specific commit.

    git checkout will do this. It takes one argument - the commit ID to restore. 

        Behavior of git checkout

            Checking out an earlier commit will change the state of at least one file.

                This is sometimes true. Git doesn't allow you to save a new commit if no files have been updated, so you might think this is always true. However, it's possible to do the following:

                    Save a commit (call this commit 1).
                    Update some files and save another commit (call this commit 2).
                    Change all the files back to their state during commit 1, then save again (call this commit 3).
                    This sometimes happens if commit 2 contained a bug, and it's important to fix the bug quickly. The easiest thing to do might be to remove all the changes introduced by commit 2 to fix the bug, then figure out how to safely reintroduce the changes later.

                    At this point, commit 3 is the latest commit, so if you checkout commit 1, none of the files will be changed. 

                Checking out an earlier commit will change the state of more than one file. &  Checking out an earlier commit will change the state of every file in the repository.

                    Both of these are sometimes true. Since each commit tracks the state of all files in the repository, it is possible that checking out an earlier commit will change the state of multiple files, or even all the files in the repository. However, it is possible to save a new commit after changing only one file, so it is possible only one file will change. 


                After checking out a commit, the state of all the files in the repository will be from the same point in time.

                    This is always true. A commit saves a snapshot of all files in the repository at the time the commit was made, so checking out an earlier commit will result in all the files being reverted to their state at the time the commit was made. That is, the files will be in a consistent state.


Show the commits made in this repository, starting with the most recent.

    git log will do this. It doesn't take any arguments.

        Behavior of git log

            git log lists the most recent commit first, as you can verify by checking the commit dates. The middle commit probably contains the code for the mute button, since the commit message indicates that the mute button was added in that commit. The top commit also probably contain the mute button, since that commit is more recent and nothing suggests the mute button has been removed. The bottom commit probably does not contain the mute button, since that commit was created before the commit that added the mute button.

            To summarize:

            commit 7be5a12f1567866b0d77ccdf2055d1a33831da78 (the top commit listed)

                Yes, probably contains the mute button.

            commit 06d72e1f95f046002ec46f41cf71957227111141 (the middle commit listed)

                Yes, probably contains the mute button.

            commit 3d4d45b246aad6a1cd0afaf7cfae26966110727e (the bottom commit listed)

                No, probably does not contain the mute button.